{"version":3,"sources":["dispatcher.js","stores/ModelStore.js","Dict.js","components/Default.jsx","actions/MyActions.js","App.js","serviceWorker.js","index.js"],"names":["Dispatcher","modelStore","list","instance","klass","this","i","len","data","length","push","emit","console","log","action","type","listModel","showIntance","deleteIntance","setIntance","postFile","EventEmitter","dispatcher","register","handleActions","bind","dict","Default","props","state","file","token","id","uuid","uploadable","uploadNotice","convertNotice","uploadProgress","convertProgress","converted","convertedLink","getInstance","onChange","e","preventDefault","fileUpload","then","response","setState","target","files","model","url","server","formData","FormData","append","config","headers","axios","post","dispatch","catch","error","MyActions","ModelStore","on","removeListener","upload","getIntance","getKlass","converted_link","setTimeout","page","get","Fragment","className","class","href","role","aria-label","src","aria-expanded","data-target","aria-hidden","name","accept","max","React","Component","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be66ceaa.chunk.js","sourcesContent":["import { Dispatcher } from \"flux\";\n\nexport default new Dispatcher;\n","import { EventEmitter } from \"events\";\n\nimport dispatcher from \"../dispatcher\";\n\nclass ModelStore extends EventEmitter {\n  constructor() {\n    super()\n    this.list = [];\n    this.instance = null;\n    this.klass= null;\n  }\n\n  listModel(list){\n    this.list = [];\n    this.klass = list.klass\n    for (var i = 0, len = list.data.length; i < len; ++i) {\n      this.list.push(list.data[i]);\n      if (i === len - 1 ) {\n        this.emit(\"got_list\");\n      }\n    }\n    if(list.data.length == 0){\n      this.emit(\"got_list\");\n    }\n\n  }\n\n  showIntance(instance){\n    this.klass = instance.klass\n    this.instance = instance.data\n    this.emit(\"got_instance\");\n  }\n\n  setIntance(instance){\n    this.klass = instance.klass\n    this.instance = instance.data\n    this.emit(\"set_instance\");\n  }\n\n\n  deleteIntance(instance){\n    this.klass = instance.klass\n    this.instance = instance.data\n    this.emit(\"deleted_instance\");\n  }\n\n  postFile(instance){\n    console.log(instance)\n    this.klass = instance.klass\n    this.instance = instance.data\n    this.emit(\"file_posted\");\n  }\n\n  getIntance() {\n    return this.instance\n  }\n\n  getList(){\n    return this.list\n  }\n\n  getListnKlass(){\n    return [this.list, this.klass]\n  }\n\n  getKlass(){\n    return this.klass\n  }\n\n  handleActions(action) {\n    switch(action.type) {\n      case \"LIST_MODEL_SUCCESS\": {\n        this.listModel(action.list);\n        break;\n      }\n      case \"GET_INSTANCE_SUCCESS\": {\n        this.showIntance(action.instance);\n        break;\n      }\n      case \"DELETE_INSTANCE_SUCCESS\": {\n        this.deleteIntance(action.instance);\n        break;\n      }\n      case \"SET_INSTANCE_SUCCESS\": {\n        this.setIntance(action.instance);\n        break;\n      }\n      case \"POST_FILE_SUCCESS\": {\n        this.postFile(action.instance);\n        break;\n      }\n\n      \n    }\n  }\n}\n\n\nconst modelStore = new ModelStore;\ndispatcher.register(modelStore.handleActions.bind(modelStore));\n\nexport default modelStore;\n","export const dict = {\n    'home' : 'خانه',\n    'choose_a_file': 'انتخاب فایل PDF',\n    'file_preparation_service': 'آماده سازی فایل برای نرم افزار ادوبی کانکت',\n    'login': 'ورود',\n    'your_uuid_is': 'کد رهگیری شما',\n    'processing_may_take_some_time': 'در حال تبدیل فایل ممکن است کمی طول بکشد',\n    'download': 'دریافت',\n    'again': 'بارگزاری دیگر'\n}","import React from 'react'\nimport ModelStore from \"../stores/ModelStore\";\nimport * as MyActions from \"../actions/MyActions\";\nimport { dict } from '../Dict';\n\nexport default class Default extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: null,\n            token: null,\n            id: null,\n            uuid: null,\n            uploadable: ' ',\n            uploadNotice: 'is-hidden',\n            convertNotice: 'is-hidden',\n            uploadProgress: 'is-hidden',\n            convertProgress: 'is-hidden',\n            converted: false,\n            convertedLink: ' '\n        }\n        this.getInstance = this.getInstance.bind(this)\n        this.onChange = this.onChange.bind(this)\n        //this.fileUpload = this.fileUpload.bind(this)\n    }\n    onFormSubmit(e) {\n        e.preventDefault() // Stop form submit\n        this.fileUpload(this.state.file).then((response) => {\n            console.log(response.data);\n        })\n    }\n    onChange(e) {\n        this.setState({ file: e.target.files[0], uploadProgress: ' ' },\n            () => MyActions.fileUpload('uploads', this.state.id, this.state.file, this.state.token));\n    }\n\n\n    componentWillMount() {\n        ModelStore.on(\"got_instance\", this.getInstance);\n        ModelStore.on(\"file_posted\", this.getInstance);\n    }\n\n    componentWillUnmount() {\n        ModelStore.removeListener(\"got_instance\", this.getInstance);\n        ModelStore.removeListener(\"file_posted\", this.getInstance);\n    }\n\n    componentDidMount() {\n\n\n    }\n\n    getInstance() {\n        var upload = ModelStore.getIntance()\n        var klass = ModelStore.getKlass()\n        if (upload && klass === 'Upload') {\n            this.setState({\n                uuid: upload.uuid,\n                uploadNotice: ' ',\n                convertNotice: ' ',\n                uploadProgress: ' is-hidden',\n                convertProgress: ' ',\n                \n            });\n        }\n        if (upload && klass === 'UploadShow' && upload.converted) {\n            this.setState({\n                converted: upload.converted,\n                convertNotice: ' is-hidden',\n                convertProgress: ' is-hidden',\n                uploadNotice: ' is-hidden',\n                convertedLink: upload.converted_link,\n                uploadable: ' is-hidden',\n            });\n        }\n        console.log(upload, klass)\n        setTimeout(function () {\n            if (this.state.uuid && !this.state.converted) {\n                MyActions.getInstance('uploads', this.state.uuid, this.state.token);\n            }\n        }.bind(this), 6000)\n    }\n\n    converted_link() {\n\n        if (this.state.converted) {\n\n            return (\n                <React.Fragment>\n                    <nav className=\"level\">\n                        <p className=\"level-item has-text-centered\">\n                            <a class=\"button is-success\" href={this.state.convertedLink}>{dict.download}</a>\n                        </p>\n                    </nav>\n\n                    <nav className=\"level\">\n                        <p className=\"level-item has-text-centered\">\n                            <a class=\"button is-warning is-light\" href=\"/\">{dict.again}</a>\n                        </p>\n                    </nav>\n                </React.Fragment>\n            )\n        }\n    }\n\n\n    render() {\n\n        return (\n            <React.Fragment>\n                <div className=\"container\">\n                    <section className=\"section\">\n                        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                            <div className=\"navbar-brand\">\n                                <a className=\"navbar-item\" href=\"/\">\n                                    <img src=\"/logo60.png\" />\n                                </a>\n                                <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n                                    <span aria-hidden=\"true\"></span>\n                                    <span aria-hidden=\"true\"></span>\n                                    <span aria-hidden=\"true\"></span>\n                                </a>\n                            </div>\n\n                            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                                <div className=\"navbar-start\">\n                                    <a className=\"navbar-item\">{dict.home}</a>\n                                </div>\n                                <div className=\"navbar-end\">\n                                    <div className=\"navbar-item\">\n\n                                    </div>\n                                </div>\n                            </div>\n                        </nav>\n                    </section>\n\n                    <section className=\"hero is-dark\">\n                        <div className=\"hero-body\">\n                            <div className=\"container\">\n                                <h2 className=\"subtitle\">{dict.file_preparation_service}</h2>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"section\">\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <nav className={\"level \"+ this.state.uploadable}>\n                                    <p className=\"level-item has-text-centered\">\n                                        <div className=\"file is-info is-boxed\">\n                                            <label className=\"file-label\">\n                                                <input className=\"file-input\" type=\"file\" name=\"resume\" onChange={this.onChange} accept=\".pdf\"></input>\n                                                <span className=\"file-cta\">\n                                                    <span className=\"file-icon\">\n                                                        <i className=\"fas fa-2x fa-file-pdf\"></i>\n                                                    </span>\n                                                    <span className=\"file-label mt-4\">{dict.choose_a_file}</span>\n                                                </span>\n                                            </label>\n                                        </div>\n                                    </p>\n                                </nav>\n\n                                <div class={\"control \" + this.state.uploadProgress}>\n                                    <progress class=\"progress is-small is-dark\" max=\"100\">15%</progress>\n                                </div>\n\n                                <div className={\"notification is-success is-light \" + this.state.convertNotice}>\n                                    <button className=\"delete\"></button>\n                                    {dict.your_uuid_is}:\n                                    <strong> {this.state.uuid}</strong>\n                                </div>\n\n                                <div class={\"control \" + this.state.convertProgress}>\n                                    <progress class=\"progress is-small is-danger\" max=\"100\">15%</progress>\n                                </div>\n\n                                <div className={\"notification is-warning is-light \" + this.state.uploadNotice}>\n                                    <button className=\"delete\"></button>\n                                    <strong> {dict.processing_may_take_some_time}</strong>\n                                </div>\n\n                                {this.converted_link()}\n                            </div>\n                        </div>\n                    </section>\n\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n","import dispatcher from \"../dispatcher\";\nimport axios, {put} from 'axios';\nimport { conf } from '../conf';\nconst server= conf.server;\n//const server='/v1';\n//const server='http://95.156.255.115/api';\n\n\nexport function getList(model, page=1, params={}, token) {\n  var queryString = Object.keys(params).map(key => key + '=' + params[key]).join('&');\n  axios.get(server + '/'+ model +'?page='+page+'&'+queryString, { headers: {'Content-Type': 'application/json', 'Authorization': \"bearer \" + token } })\n  .then(function (response) {\n    dispatcher.dispatch({\n      type: \"LIST_MODEL_SUCCESS\",\n      list: response.data,\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport function fileUpload(model, id , file, token){\n  const url = server + '/'+ model;\n  const formData = new FormData();\n  formData.append('upload[attached_document]',file)\n  //formData.append('profile[id]',id)\n  const config = {\n      headers: {\n          'content-type': 'multipart/form-data',\n          'Authorization': \"bearer \" + token \n      }\n  }\n  axios.post(url, formData,config).then(function (response) {\n    dispatcher.dispatch({\n      type: \"POST_FILE_SUCCESS\",\n      instance: response.data,\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport function getInstance(model, id, token, page=1) {\n  axios.get(server + '/'+ model +'/'+id+'?page='+page, { headers: {'Content-Type': 'application/json', 'Authorization': \"bearer \" + token } })\n  .then(function (response) {\n    dispatcher.dispatch({\n      type: \"GET_INSTANCE_SUCCESS\",\n      instance: response.data,\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport function removeInstance(model, params={}, token ) {\n  var queryString = Object.keys(params).map(key => key + '=' + params[key]).join('&');\n  axios.get(server + '/'+ model +'/delete?'+queryString, { headers: {'Content-Type': 'application/json', 'Authorization': \"bearer \" + token } })\n  .then(function (response) {\n    dispatcher.dispatch({\n      type: \"DELETE_INSTANCE_SUCCESS\",\n      instance: response.data,\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport function setInstance(model, data, token) {\n  axios.post(server + '/'+ model +'/', data, { headers: {'Content-Type': 'application/json', 'Authorization': \"bearer \" + token } })\n  .then(function (response) {\n    dispatcher.dispatch({\n      type: \"SET_INSTANCE_SUCCESS\",\n      instance: response.data,\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport function updateInstance(model, data, token) {\n  axios.put(server + '/'+ model +'/'+data.id, data, { headers: {'Content-Type': 'application/json', 'Authorization': \"bearer \" + token } })\n  .then(function (response) {\n    dispatcher.dispatch({\n      type: \"SET_INSTANCE_SUCCESS\",\n      instance: response.data,\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './css/bulma-rtl.css';\nimport './css/file-upload.css';\nimport Default from \"./components/Default.jsx\";\n//import Sample from \"./components/Sample\";\n//import Something from \"./components/Something\";\n//import NoMatch from \"./components/NoMatch\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n        <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Default} />\n      </Switch>\n      </Router>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}