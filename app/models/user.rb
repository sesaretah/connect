class User < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable, :trackable
  has_one :profile, :dependent => :destroy

  has_many :actuals, :dependent => :destroy
  has_many :metas, through: :actuals
  has_many :channels, :dependent => :destroy
  has_many :interactions, :dependent => :destroy
  has_many :notifications#, :dependent => :destroy# Notifications generated by user (not genreted for users)
  has_many :shares

  def assign(role_id)
    self.assignments = [] if self.assignments.blank?
    self.assignments << role_id
    self.save
  end

  def unassign(role_id)
    self.assignments -= [role_id] if !self.assignments.blank?
    self.save
  end

  def notify_user
    code = rand(10 ** 6).to_s.rjust(6,'0')  
    self.last_code = code
    self.last_code_datetime = DateTime.now
    self.last_login = DateTime.now
    self.save
    VerificationsMailer.notify_email(self.id, code).deliver_later
  end

  def self.verify(code)
    user = self.where('last_code = ? AND last_code_datetime > ?', code, 10.minutes.ago).first
  end

  def follow(user)
    interaction = Interaction.where(interaction_type: 'Follow', interactionable_type: 'Profile', interactionable_id: user.id, user_id: self.profile.id).first
    return true if interaction
  end

  
end
